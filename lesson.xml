<?xml version="1.0" ?>
<document version="2.0">
	<video src="https://www.loom.com/share/8cf97c1c51074ede9bb28a47d4761206?sharedAppSource=personal_library" width="857" height="482"/>
	<paragraph>
		If you want to repeat some computation, a programming language usually provides a construct called a
		<bold>loop</bold>
		 that lets you repeat code some number of times. For those that know Java, Python has very similar constructs to the for loop and the while loop.
	</paragraph>
	<heading level="1">While Loop</heading>
	<paragraph>
		A
		<bold>while loop</bold>
		 has a
		<bold>condition</bold>
		 and a
		<bold>body.</bold>
		 The while loop proceeds in iterations, each iteration executes the
		<bold>body</bold>
		 only if the
		<bold>condition</bold>
		 is
		<code>True</code>
		, otherwise the loop ends. In general, a loop while loop looks like
	</paragraph>
	<pre>while condition:
    # Loop body
    statement
    statement
    statement</pre>
	<paragraph>For example, the code below shows an example of a very simple loop.</paragraph>
	<snippet language="py" runnable="true" line-numbers="true">
		<snippet-file id="code">x = 1
while x &lt; 100:
    print(x)
    x = x * 2

print('After loop', x)</snippet-file>
	</snippet>
	<paragraph>
		Notice that the condition here is
		<code>x &lt; 100</code>
		 so the loop keeps executing the body (
		<code>print(x)</code>
		 and
		<code>x = x * 2</code>
		) until the next iteration it is false (when
		<code>x = 128</code>
		). After the loop ends, it continues on to the code after the loop (
		<code>print('After loop', x)</code>
		)
	</paragraph>
	<callout type="warning">
		It was probably easy to miss, but you need a
		<code>:</code>
		 at the end of the first line of a
		<code>while</code>
		 loop! This is how Python knows you are saying that this is where the condition ends and the body of the loop begins!
	</callout>
	<heading level="2">A Very Important Point About Python</heading>
	<paragraph>
		Notice in the example above, Python is somehow able to differentiate that the
		<code>print</code>
		 statement at the end of the program is outside the loop! How does it decide what is inside or outside a loop?
		<bold>Indentation.</bold>
		 Unlike other languages that use explicit delimiters (like
		<code>{}</code>
		 in Java) to determine what goes inside a loop, Python only uses indentation.
	</paragraph>
	<paragraph>In Python, getting your indentation right is very important. A very common error for beginning Python programmers comes from incorrectly indenting your code. If you see the error</paragraph>
	<pre>IndentationError: unexpected indent
</pre>
	<paragraph>It means there is an error with your indentation! </paragraph>
</document>
