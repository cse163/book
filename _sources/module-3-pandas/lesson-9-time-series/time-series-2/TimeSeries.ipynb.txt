{"cells":[{"cell_type":"markdown","source":["# Time Series\n","\n","```{jupyter-info}\n","{rel-data-download}`bicycles.csv`\n","```\n","\n","We start by loading the biycycles dataset into a `DataFrame` using the same code as in the last slide to index the data by the date."],"metadata":{}},{"cell_type":"code","execution_count":1,"source":["# Some setup code to get the plotting library correct\n","import matplotlib.pyplot as plt\n","import pandas as pd\n","\n","%matplotlib inline"],"outputs":[],"metadata":{}},{"cell_type":"code","execution_count":2,"source":["df = pd.read_csv('bicycles.csv', \n","                 index_col='Date', parse_dates=True)\n","\n","# Sorts the rows so the index is sorted\n","df = df.sort_index()  \n","\n","df  # For display"],"outputs":[{"output_type":"execute_result","data":{"text/plain":["                     East  West\n","Date                           \n","2012-10-03 00:00:00   4.0   9.0\n","2012-10-03 01:00:00   4.0   6.0\n","2012-10-03 02:00:00   1.0   1.0\n","2012-10-03 03:00:00   2.0   3.0\n","2012-10-03 04:00:00   6.0   1.0\n","...                   ...   ...\n","2019-03-31 19:00:00  30.0  58.0\n","2019-03-31 20:00:00  26.0  31.0\n","2019-03-31 21:00:00  18.0  15.0\n","2019-03-31 22:00:00   7.0  14.0\n","2019-03-31 23:00:00   6.0  10.0\n","\n","[56904 rows x 2 columns]"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>East</th>\n","      <th>West</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2012-10-03 00:00:00</th>\n","      <td>4.0</td>\n","      <td>9.0</td>\n","    </tr>\n","    <tr>\n","      <th>2012-10-03 01:00:00</th>\n","      <td>4.0</td>\n","      <td>6.0</td>\n","    </tr>\n","    <tr>\n","      <th>2012-10-03 02:00:00</th>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>2012-10-03 03:00:00</th>\n","      <td>2.0</td>\n","      <td>3.0</td>\n","    </tr>\n","    <tr>\n","      <th>2012-10-03 04:00:00</th>\n","      <td>6.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2019-03-31 19:00:00</th>\n","      <td>30.0</td>\n","      <td>58.0</td>\n","    </tr>\n","    <tr>\n","      <th>2019-03-31 20:00:00</th>\n","      <td>26.0</td>\n","      <td>31.0</td>\n","    </tr>\n","    <tr>\n","      <th>2019-03-31 21:00:00</th>\n","      <td>18.0</td>\n","      <td>15.0</td>\n","    </tr>\n","    <tr>\n","      <th>2019-03-31 22:00:00</th>\n","      <td>7.0</td>\n","      <td>14.0</td>\n","    </tr>\n","    <tr>\n","      <th>2019-03-31 23:00:00</th>\n","      <td>6.0</td>\n","      <td>10.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>56904 rows Ã— 2 columns</p>\n","</div>"]},"metadata":{},"execution_count":2}],"metadata":{}},{"cell_type":"markdown","source":["Just like with any other `pandas` object, we can inspect the `index` of this `DataFrame` using the `.index` attribute."],"metadata":{}},{"cell_type":"code","execution_count":3,"source":["df.index"],"outputs":[{"output_type":"execute_result","data":{"text/plain":["DatetimeIndex(['2012-10-03 00:00:00', '2012-10-03 01:00:00',\n","               '2012-10-03 02:00:00', '2012-10-03 03:00:00',\n","               '2012-10-03 04:00:00', '2012-10-03 05:00:00',\n","               '2012-10-03 06:00:00', '2012-10-03 07:00:00',\n","               '2012-10-03 08:00:00', '2012-10-03 09:00:00',\n","               ...\n","               '2019-03-31 14:00:00', '2019-03-31 15:00:00',\n","               '2019-03-31 16:00:00', '2019-03-31 17:00:00',\n","               '2019-03-31 18:00:00', '2019-03-31 19:00:00',\n","               '2019-03-31 20:00:00', '2019-03-31 21:00:00',\n","               '2019-03-31 22:00:00', '2019-03-31 23:00:00'],\n","              dtype='datetime64[ns]', name='Date', length=56904, freq=None)"]},"metadata":{},"execution_count":3}],"metadata":{}},{"cell_type":"markdown","source":["So now to get a row for a particular date and time, we can index into the `DataFrame` using `loc`! The key difference here is that we will specify a string for the date-time rather than a number (since the index is the date-time)."],"metadata":{}},{"cell_type":"code","execution_count":4,"source":["df.loc['2019-03-31 15:00:00']"],"outputs":[{"output_type":"execute_result","data":{"text/plain":["East    130.0\n","West    121.0\n","Name: 2019-03-31 15:00:00, dtype: float64"]},"metadata":{},"execution_count":4}],"metadata":{}},{"cell_type":"markdown","source":["The incredibly powerful thing about using date-time as the index type is it allows us to do semantic indexing based on dates and times. Here are some examples:\n","\n","You can pick just a date and it will include all rows from that date (meaning it will have all the times for that day)."],"metadata":{}},{"cell_type":"code","execution_count":5,"source":["df.loc['2017-03-31']"],"outputs":[{"output_type":"execute_result","data":{"text/plain":["                      East   West\n","Date                             \n","2017-03-31 00:00:00    2.0    4.0\n","2017-03-31 01:00:00    2.0    0.0\n","2017-03-31 02:00:00    1.0    0.0\n","2017-03-31 03:00:00    1.0    0.0\n","2017-03-31 04:00:00    3.0    3.0\n","2017-03-31 05:00:00   23.0   14.0\n","2017-03-31 06:00:00   57.0   49.0\n","2017-03-31 07:00:00  163.0   99.0\n","2017-03-31 08:00:00  250.0  162.0\n","2017-03-31 09:00:00   90.0   70.0\n","2017-03-31 10:00:00   52.0   38.0\n","2017-03-31 11:00:00   39.0   31.0\n","2017-03-31 12:00:00   37.0   37.0\n","2017-03-31 13:00:00   52.0   34.0\n","2017-03-31 14:00:00   45.0   55.0\n","2017-03-31 15:00:00   74.0   87.0\n","2017-03-31 16:00:00   83.0  223.0\n","2017-03-31 17:00:00  145.0  333.0\n","2017-03-31 18:00:00  117.0  206.0\n","2017-03-31 19:00:00   50.0   84.0\n","2017-03-31 20:00:00   26.0   36.0\n","2017-03-31 21:00:00   16.0   40.0\n","2017-03-31 22:00:00   12.0   22.0\n","2017-03-31 23:00:00    5.0   15.0"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>East</th>\n","      <th>West</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2017-03-31 00:00:00</th>\n","      <td>2.0</td>\n","      <td>4.0</td>\n","    </tr>\n","    <tr>\n","      <th>2017-03-31 01:00:00</th>\n","      <td>2.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>2017-03-31 02:00:00</th>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>2017-03-31 03:00:00</th>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>2017-03-31 04:00:00</th>\n","      <td>3.0</td>\n","      <td>3.0</td>\n","    </tr>\n","    <tr>\n","      <th>2017-03-31 05:00:00</th>\n","      <td>23.0</td>\n","      <td>14.0</td>\n","    </tr>\n","    <tr>\n","      <th>2017-03-31 06:00:00</th>\n","      <td>57.0</td>\n","      <td>49.0</td>\n","    </tr>\n","    <tr>\n","      <th>2017-03-31 07:00:00</th>\n","      <td>163.0</td>\n","      <td>99.0</td>\n","    </tr>\n","    <tr>\n","      <th>2017-03-31 08:00:00</th>\n","      <td>250.0</td>\n","      <td>162.0</td>\n","    </tr>\n","    <tr>\n","      <th>2017-03-31 09:00:00</th>\n","      <td>90.0</td>\n","      <td>70.0</td>\n","    </tr>\n","    <tr>\n","      <th>2017-03-31 10:00:00</th>\n","      <td>52.0</td>\n","      <td>38.0</td>\n","    </tr>\n","    <tr>\n","      <th>2017-03-31 11:00:00</th>\n","      <td>39.0</td>\n","      <td>31.0</td>\n","    </tr>\n","    <tr>\n","      <th>2017-03-31 12:00:00</th>\n","      <td>37.0</td>\n","      <td>37.0</td>\n","    </tr>\n","    <tr>\n","      <th>2017-03-31 13:00:00</th>\n","      <td>52.0</td>\n","      <td>34.0</td>\n","    </tr>\n","    <tr>\n","      <th>2017-03-31 14:00:00</th>\n","      <td>45.0</td>\n","      <td>55.0</td>\n","    </tr>\n","    <tr>\n","      <th>2017-03-31 15:00:00</th>\n","      <td>74.0</td>\n","      <td>87.0</td>\n","    </tr>\n","    <tr>\n","      <th>2017-03-31 16:00:00</th>\n","      <td>83.0</td>\n","      <td>223.0</td>\n","    </tr>\n","    <tr>\n","      <th>2017-03-31 17:00:00</th>\n","      <td>145.0</td>\n","      <td>333.0</td>\n","    </tr>\n","    <tr>\n","      <th>2017-03-31 18:00:00</th>\n","      <td>117.0</td>\n","      <td>206.0</td>\n","    </tr>\n","    <tr>\n","      <th>2017-03-31 19:00:00</th>\n","      <td>50.0</td>\n","      <td>84.0</td>\n","    </tr>\n","    <tr>\n","      <th>2017-03-31 20:00:00</th>\n","      <td>26.0</td>\n","      <td>36.0</td>\n","    </tr>\n","    <tr>\n","      <th>2017-03-31 21:00:00</th>\n","      <td>16.0</td>\n","      <td>40.0</td>\n","    </tr>\n","    <tr>\n","      <th>2017-03-31 22:00:00</th>\n","      <td>12.0</td>\n","      <td>22.0</td>\n","    </tr>\n","    <tr>\n","      <th>2017-03-31 23:00:00</th>\n","      <td>5.0</td>\n","      <td>15.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"]},"metadata":{},"execution_count":5}],"metadata":{}},{"cell_type":"markdown","source":["You could also leave off the day to get all of the rows for a year and month."],"metadata":{}},{"cell_type":"code","execution_count":6,"source":["df.loc['2017-03']"],"outputs":[{"output_type":"execute_result","data":{"text/plain":["                     East  West\n","Date                           \n","2017-03-01 00:00:00   1.0   2.0\n","2017-03-01 01:00:00   2.0   2.0\n","2017-03-01 02:00:00   1.0   1.0\n","2017-03-01 03:00:00   1.0   0.0\n","2017-03-01 04:00:00   3.0   3.0\n","...                   ...   ...\n","2017-03-31 19:00:00  50.0  84.0\n","2017-03-31 20:00:00  26.0  36.0\n","2017-03-31 21:00:00  16.0  40.0\n","2017-03-31 22:00:00  12.0  22.0\n","2017-03-31 23:00:00   5.0  15.0\n","\n","[744 rows x 2 columns]"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>East</th>\n","      <th>West</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2017-03-01 00:00:00</th>\n","      <td>1.0</td>\n","      <td>2.0</td>\n","    </tr>\n","    <tr>\n","      <th>2017-03-01 01:00:00</th>\n","      <td>2.0</td>\n","      <td>2.0</td>\n","    </tr>\n","    <tr>\n","      <th>2017-03-01 02:00:00</th>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>2017-03-01 03:00:00</th>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>2017-03-01 04:00:00</th>\n","      <td>3.0</td>\n","      <td>3.0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2017-03-31 19:00:00</th>\n","      <td>50.0</td>\n","      <td>84.0</td>\n","    </tr>\n","    <tr>\n","      <th>2017-03-31 20:00:00</th>\n","      <td>26.0</td>\n","      <td>36.0</td>\n","    </tr>\n","    <tr>\n","      <th>2017-03-31 21:00:00</th>\n","      <td>16.0</td>\n","      <td>40.0</td>\n","    </tr>\n","    <tr>\n","      <th>2017-03-31 22:00:00</th>\n","      <td>12.0</td>\n","      <td>22.0</td>\n","    </tr>\n","    <tr>\n","      <th>2017-03-31 23:00:00</th>\n","      <td>5.0</td>\n","      <td>15.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>744 rows Ã— 2 columns</p>\n","</div>"]},"metadata":{},"execution_count":6}],"metadata":{}},{"cell_type":"markdown","source":["Unsurprisingly, you can also just get all the rows for a year. All of these examples are accomplished by interpreting the value you are using to index as a date-time, and then selecting all the rows that match that date-time. If you just specify a year, it finds all rows that have that year."],"metadata":{}},{"cell_type":"code","execution_count":7,"source":["df.loc['2017']"],"outputs":[{"output_type":"execute_result","data":{"text/plain":["                     East  West\n","Date                           \n","2017-01-01 00:00:00   0.0   5.0\n","2017-01-01 01:00:00   5.0  14.0\n","2017-01-01 02:00:00   1.0   0.0\n","2017-01-01 03:00:00   0.0   2.0\n","2017-01-01 04:00:00   0.0   1.0\n","...                   ...   ...\n","2017-12-31 19:00:00   9.0  12.0\n","2017-12-31 20:00:00   6.0   8.0\n","2017-12-31 21:00:00   3.0  10.0\n","2017-12-31 22:00:00   7.0   6.0\n","2017-12-31 23:00:00   7.0   9.0\n","\n","[8760 rows x 2 columns]"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>East</th>\n","      <th>West</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2017-01-01 00:00:00</th>\n","      <td>0.0</td>\n","      <td>5.0</td>\n","    </tr>\n","    <tr>\n","      <th>2017-01-01 01:00:00</th>\n","      <td>5.0</td>\n","      <td>14.0</td>\n","    </tr>\n","    <tr>\n","      <th>2017-01-01 02:00:00</th>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>2017-01-01 03:00:00</th>\n","      <td>0.0</td>\n","      <td>2.0</td>\n","    </tr>\n","    <tr>\n","      <th>2017-01-01 04:00:00</th>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2017-12-31 19:00:00</th>\n","      <td>9.0</td>\n","      <td>12.0</td>\n","    </tr>\n","    <tr>\n","      <th>2017-12-31 20:00:00</th>\n","      <td>6.0</td>\n","      <td>8.0</td>\n","    </tr>\n","    <tr>\n","      <th>2017-12-31 21:00:00</th>\n","      <td>3.0</td>\n","      <td>10.0</td>\n","    </tr>\n","    <tr>\n","      <th>2017-12-31 22:00:00</th>\n","      <td>7.0</td>\n","      <td>6.0</td>\n","    </tr>\n","    <tr>\n","      <th>2017-12-31 23:00:00</th>\n","      <td>7.0</td>\n","      <td>9.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>8760 rows Ã— 2 columns</p>\n","</div>"]},"metadata":{},"execution_count":7}],"metadata":{}},{"cell_type":"markdown","source":["You can also use ranges to select multiple years!"],"metadata":{}},{"cell_type":"code","execution_count":8,"source":["df.loc['2017':'2018']  # All rows from 2017 to 2018 (inclusive for pandas)"],"outputs":[{"output_type":"execute_result","data":{"text/plain":["                     East  West\n","Date                           \n","2017-01-01 00:00:00   0.0   5.0\n","2017-01-01 01:00:00   5.0  14.0\n","2017-01-01 02:00:00   1.0   0.0\n","2017-01-01 03:00:00   0.0   2.0\n","2017-01-01 04:00:00   0.0   1.0\n","...                   ...   ...\n","2018-12-31 19:00:00   9.0   5.0\n","2018-12-31 20:00:00  12.0  14.0\n","2018-12-31 21:00:00   7.0   7.0\n","2018-12-31 22:00:00   3.0   4.0\n","2018-12-31 23:00:00   7.0   6.0\n","\n","[17520 rows x 2 columns]"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>East</th>\n","      <th>West</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2017-01-01 00:00:00</th>\n","      <td>0.0</td>\n","      <td>5.0</td>\n","    </tr>\n","    <tr>\n","      <th>2017-01-01 01:00:00</th>\n","      <td>5.0</td>\n","      <td>14.0</td>\n","    </tr>\n","    <tr>\n","      <th>2017-01-01 02:00:00</th>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>2017-01-01 03:00:00</th>\n","      <td>0.0</td>\n","      <td>2.0</td>\n","    </tr>\n","    <tr>\n","      <th>2017-01-01 04:00:00</th>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2018-12-31 19:00:00</th>\n","      <td>9.0</td>\n","      <td>5.0</td>\n","    </tr>\n","    <tr>\n","      <th>2018-12-31 20:00:00</th>\n","      <td>12.0</td>\n","      <td>14.0</td>\n","    </tr>\n","    <tr>\n","      <th>2018-12-31 21:00:00</th>\n","      <td>7.0</td>\n","      <td>7.0</td>\n","    </tr>\n","    <tr>\n","      <th>2018-12-31 22:00:00</th>\n","      <td>3.0</td>\n","      <td>4.0</td>\n","    </tr>\n","    <tr>\n","      <th>2018-12-31 23:00:00</th>\n","      <td>7.0</td>\n","      <td>6.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>17520 rows Ã— 2 columns</p>\n","</div>"]},"metadata":{},"execution_count":8}],"metadata":{}},{"cell_type":"markdown","source":["# Plotting\n","In Lesson 10, we will spend time discussing how to plot data and how to interpret those visualizations. `pandas` provides some basic functionality for plotting."],"metadata":{}},{"cell_type":"code","execution_count":9,"source":["df.plot()"],"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7f3d35ecdc40>"]},"metadata":{},"execution_count":9},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":""},"metadata":{"needs_background":"light"}}],"metadata":{}},{"cell_type":"markdown","source":["This is not exactly readable... The problem is the data is too \"high resolution\": it's drawing a line for every hour of every day for 6 years! No wonder we can't actually see anything.\n","\n","What we need is to \"resample\" the data so the data points occurr less frequently. One way to do this would be to just drop every row besides Sundays at 12pm (arbitrarily decided), but you can tell that won't work because it won't give us a good idea of overall biking trends. Instead, it would be nice if we could re-organize the data so each row was the total number of bikers in a week (just for example).\n","\n","This sounds somewhat familiar to a group-by, but turns out to work quite differently (more on this in next section). To change the time series to have the granularity of every week and then plot that, we use the `resample` method. In the next cell, we transform the data so each row is a time-span of a week and has the sum of all the bikers for the hours in that week."],"metadata":{}},{"cell_type":"code","execution_count":10,"source":["weekly = df.resample('W').sum()\n","weekly.plot()"],"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7f3d354c6280>"]},"metadata":{},"execution_count":10},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":""},"metadata":{"needs_background":"light"}}],"metadata":{}},{"cell_type":"markdown","source":["Much more legible! Now we can see both East and West traffic. Looking at the graphs, we see some seasonality in the data - there are peaks in the summer and troughs in the winter. \n","\n","`'W'` is a special code for `resample` to tell it to resample by week. There are many other codes you can pass to it instead!\n","* `'D'` = day\n","* `'W'` = week\n","* `'M'` = month\n","* `'A'` = year\n","* [And much much more!](https://pandas.pydata.org/pandas-docs/version/0.17.0/timeseries.html#offset-aliases)\n","\n","Generally when analyzing time series, you are interested in looking at two metrics of describing the series.\n","* Its **trend**, which shows how the average value changes over time. This dataset seems to have no obvious upward or downward trend (the average number of bicyclers, in say a year, are about the same).\n","* Its **seasonality**, which shows how the sequence fluctuates over some period. This series definitely has some seasonality to it since it goes up and down in relatively the same pattern each year.\n","\n","# Resample vs Group By\n","Earlier, we showed that to change the time series to be by week, instead of by hour, we used a `resample`. We commented that we didn't actually want to use `groupby` because these are fundamentally different operations.\n","\n","To show you that these in-fact, are different, we can try using a `groupby` to solve the problem. If we want to access the `week` for each row, we can use `df.index.week`. `df.index` returns the date-time index and `.week` gets the week value from each row. The week value will be a number from 0 to 52, indicating which week that date-time is in.\n","\n","In the cell below, we `groupby` this week value and then plot the result."],"metadata":{}},{"cell_type":"code","execution_count":11,"source":["weekly_groupby = df.groupby(df.index.week).sum()\n","weekly_groupby.plot()"],"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7f3d354a3c70>"]},"metadata":{},"execution_count":11},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":""},"metadata":{"needs_background":"light"}}],"metadata":{}},{"cell_type":"markdown","source":["Wow! Why does that look so different?!?!\n","\n","It has to do with how `groupby` works and the fact that we tried to group by the week-number. As we said before, `df.index.week` will be a `Series` of numbers between 0 and 52, indicating which week the date-time fell in. However, this causes a problem for the same week in different years! \n","\n","Consider `Jan 2, 2018` and `Jan 5, 2019`. Both of those `.week` values will be `0` since they are in the first week! The year information was lost! They will end up landing in the same group, which is why we can see that graph only goes from 0 to 52!\n","\n","Instead, we want to do some kind of grouping based on the weeks themselves. We want `Jan 2, 2018` and `Jan 5, 2019` to go into separate groups with their respective date-times that are in the same week. \n","\n","While it is actually possible to try to put something together that works and uses `groupby`, we will not go into that here. Instead, `resample` is an operation precisely meant to make this easier! You just tell `pandas` you want to resample by week, and it figures that out for you! \n","\n","There is a lot more complexity you can get into with time series. For example, `resample` turns out to be much more complicated since you can use it to **downsample** (throw away data)  or **upsample** (create new data) so that the data are sampled at the desired frequency. There are too many details to go into that here, but you may learn more from [`pandas` documentation](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.resample.html)!"],"metadata":{}}],"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.3"}},"nbformat":4,"nbformat_minor":2}